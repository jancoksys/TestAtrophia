1) UObject - базовый класс для всех объектов Unreal Engine, в угоду ООП-архитектуре. AActor - объект UE, который может быть помещен или заспавлен на уровне. 
UObject в чистом виде особо не используется, используются потомки этого класса - экторы, компоненты и т. д. Теоретически, можно заставить UObject выполнять 
функции эктора, так как сам эктор - наследник UObject. 
2) UPROPERTY - система рефлексии UE, включающая в себя сериализацию полей, репликацию, сборщик мусора, связь C++ и BP. Помечая поле как UPROPERTY, мы сможем взаимодействовать с ним через BP,
сделать репликацию, сообщить garbage collector'у, чтобы поле не было удалено раньше времени и т.д.
3) CDO - дефолтный объект класса. Хранит дефолтные значения полей класса, к которым можно получить доступ в любой момент.
4) И Slate, и UMG служат для создания пользовательских интерфейсов (UI). Slate появился раньше, и использует чистый С++ для создания UI. UMG же построен на Slate и предоставляет визуальный редактор UI (типа BP).
5) RPC "из коробки" можно вызвать только на реплицируемых экторах. Однако репликацию можно добавить и к UObject, если вручную прописать логику репликации.
6) Draw call - вызов отрисовки (рендеринг) кадра. Количество отрисовок можно уменьшить, используя менее детализированные текстуры, уменьшая частоту рендеринга объектов в зависимости от расстояния до них (significance), 
не отрисовывать невидимые или отдаленные объекты.
7) В UE можно сделать свой код многопоточным, используя встроенные классы: FAsyncTask для асинхронных задач (аналог async в c++), FRuinnableThread для создания потока (аналог std::thread), или FQueuedThreadPool для создания
пула потоков.
8) Методы оптимизации - логические LODы для игровой логики (например, отключение Tick далеких объектов), LODы для мешей (уменьшение детализации при удалении), стриминг уровней (подгрузка и выгрузка уровня частями во время игры).